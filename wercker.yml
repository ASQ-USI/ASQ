# TODO: if Wercker is gonna support aliases, we can define the version in a settings section
# MAINTAINER: Vincenzo Ferme <info@vincenzoferme.it>
box:
  id: asqslide/wercker-box-asq:0.5.0-dev
  username: $DOCKER_HUB_BOX_USERNAME
  password: $DOCKER_HUB_BOX_PASSWORD
  ports:
    - "3000:3000"

# TODO: add .werckerignore, when this it is gonna be supported (https://github.com/wercker/wercker/issues/62)
# TODO: evaluate if there is a way to avoid duplication across pipelines 

####### THE FOLLOWING PIPELINES ARE AVAILABLE FOR LOCAL DEVELOPMENT #######

dev:
    services:
      - name: mongo
        id: mongo:3.2.11
      - name: redis
        id: redis:3.2.5-alpine
        cmd: redis-server
    steps:
        # TODO: evaluate, after pinning the dependencies, if the following step can be further improved
        #       Maybe also evaluation Yarn
        - wercker/npm-install@1.1.4:
            use-cache: true
            clear-cache-on-failed: false
            options: --unsafe-perm
        # TODO: continue working from here to add Yarn support
        # 1) add yarn as a ASQ env dependency, apply changes also in install-private..
        # 2) have a better organize cache management
        # - nicka/yarn@1.0.0:
        #     production: false
        #     cache: true
        - script:
            # If you want to update environment dependencies, refer to the ENV
            # variables set on top of the references script
            name: install Bower dependencies
            # Set the working folder, so we can refer to files in that context
            cwd: $WERCKER_SOURCE_DIR/lib/support/wercker/
            # Declare we want to install the bower dependencies using the cache,
            # and the folders in which the bower.json files are defined
            code: ./utils/bower_install_with_cache.sh "/ lib/support/pdf lib/support/liveApp"
        # TODO: improve the following step, if slow, to store the plugin folder
        #       and use the cache. It seems slow locally (dev pipeline)
        # NOTE: now we ask the developer to edit the references file to invalidate the cache
        - script:
            name: install ASQ plugins
            # Set the working folder, so we can refer to files in that context
            cwd: $WERCKER_SOURCE_DIR/lib/support/wercker/
             # Declare we want to use a cache, install ASQ plugins,
            # and that we do not want to store any folder
            # NOTE: we do not need to store folders, because they are already part
            #       of the source code, after the installation
            code: ./utils/wercker_cache_handler.sh "asq_plugins" "cache_asq_plugins.sh" ""
        # TODO: improve the following step, if slow, to cache the build results
        - script:
            name: build ASQ
            cwd: $WERCKER_SOURCE_DIR
            code: npm run build:dev
        - script:
            # If you want to update environment dependencies, refer to the ENV
            # variables set on top of the references script
            name: install ASQ private dependencies
            # Set the working folder, so we can refer to files in that context
            cwd: $WERCKER_SOURCE_DIR/lib/support/wercker/
            # Declare we want to use a cache, install ASQ private dependencies,
            # and that we do not want to store any folder
            # This happens only if the current user has the permission to read
            # the private dependencies
            # NOTE: we do not need to store folders, because they are already part
            #       of the source code, after the installation
            code: |
                  if [ -n "$CI_USER_TOKEN" ]; then
                      echo 'Configuring npm to use wercker cache'
                      npm config set cache "$WERCKER_CACHE_DIR/wercker/npm" -g
                      ./utils/wercker_cache_handler.sh "asq_private_dependencies_dev" \
                      "install_private_dependencies.sh" ""
                  else
                     echo 'Skipping step, because you are not authorized'
                  fi
        - script:
            name: setting up environment
            code: |
                  export MONGO_DB_NAME=asq
                  export MONGO_HOST=$MONGO_PORT_27017_TCP_ADDR
                  export REDIS_HOST=$REDIS_PORT_6379_TCP_ADDR
                  export NGINX_CLIENT_MAX_BODY_SIZE='100m'
        # - internal/shell
        - internal/watch:
            code: $NPM_RUN_COMMAND
            reload: false
        # - internal/store-container

# NOTE: the following pipeline assumes you already correctly executed the dev pipeline.
#       By assuming what stated above, we speed up the execution time of the pipeline
# Depends on: dev
dev-tests:
    # TODO: enable when they are needed by the tests
    # services:
    #   - name: mongo
    #     id: mongo:3.2.11
    #   - name: redis
    #     id: redis:3.2.5-alpine
    #     cmd: redis-server
    steps:
        - wercker/npm-test@0.0.3

####### THE FOLLOWING PIPELINES ARE DEFINED FOR WERCKER CLOUD #######

# TODO: improve the pipelines to build minimal base image, then separate different
#       builds, tests pipeline where we add the dependencies dedicated to the tasks
#       Ref: http://blog.wercker.com/introducing-wercker-workflows
#       NOTE: if I split take into account that as fast we can report ASQ builds correctly,
#             better it is
# NOTE: since we have to reload the environment, we collapsed some pipelines
#       , to save time. TODO:  Try to just install the dependency we need for 
#       the pipeline (if it is faster)
# NOTE: Name when split: build-initial:
build:
    steps:
        # TODO: evaluate, after pinning the dependencies, if the following step can be further improved
        # NOTE: install all the dependencies, now that the pipelines are collapsed
        # - wercker/npm-install@1.1.4:
        #     use-cache: true
        #     clear-cache-on-failed: false
        #     options: --unsafe-perm --production
        - wercker/npm-install@1.1.4:
            use-cache: true
            clear-cache-on-failed: false
            options: --unsafe-perm
        - script:
            # If you want to update environment dependencies, refer to the ENV
            # variables set on top of the references script
            name: install Bower dependencies
            # Set the working folder, so we can refer to files in that context
            cwd: $WERCKER_SOURCE_DIR/lib/support/wercker/
            # Declare we want to install the bower dependencies using the cache,
            # and the folders in which the bower.json files are defined
            code: ./utils/bower_install_with_cache.sh "/ lib/support/pdf lib/support/liveApp"
# 
# Depends on: build-initial
# NOTE: Name when split: build-execute-tests:
    # services:
    #   - name: mongo
    #     id: mongo:3.2.11
    #   - name: redis
    #     id: redis:3.2.5-alpine
    #     cmd: redis-server
    # steps:

        # TODO: evaluate, after pinning the dependencies, if the following step can be further improved
        # - wercker/npm-install@1.1.4:
        #     use-cache: true
        #     clear-cache-on-failed: false
        #     options: --unsafe-perm
        - wercker/npm-test@0.0.3
        # TODO: improve the following step, if slow, to store the plugin folder
        #       and use the cache. 
        - script:
            name: install ASQ plugins
            # Set the working folder, so we can refer to files in that context
            cwd: $WERCKER_SOURCE_DIR
            code: |
                  export PLUGIN_DIR=plugins
                  npm run plugins
#
# Depends on: build-initial
# TODO: since we have to reload the environment, we collapsed some pipelines
#       , to save time. Or just install the dependency we need for the pipeline (if faster)
# NOTE: Name when split: build-clean:
#     steps:

        # TODO: evaluate if we can also cache some of the following steps, e.g., partially using https://github.com/mitel/step-webpack
        - script:
            name: build ASQ
            cwd: $WERCKER_SOURCE_DIR
            code: npm run build:pro
        - script:
            # If you want to update environment dependencies, refer to the ENV
            # variables set on top of the references script
            name: install ASQ private dependencies
            # Set the working folder, so we can refer to files in that context
            cwd: $WERCKER_SOURCE_DIR/lib/support/wercker/
            # Declare we want to use a cache, install ASQ private dependencies,
            # and that we do not want to store any folder
            # This happens only if the current user has the permission to read
            # the private dependencies
            # NOTE: we do not need to store folders, because they are already part
            #       source code, after the installation
            code: |
                  if [ -n "$CI_USER_TOKEN" ]; then
                      echo 'Configuring npm to use wercker cache'
                      npm config set cache "$WERCKER_CACHE_DIR/wercker/npm" -g
                      ./utils/wercker_cache_handler.sh "asq_private_dependencies_build" \
                      "install_private_dependencies.sh" "slide2html public/ui public/cockpit"
                  else
                     echo 'Skipping step, because you are not authorized'
                  fi
        - script:
            name: prune development dependencies
            # Set the working folder, so we can refer to files in that context
            cwd: $WERCKER_SOURCE_DIR
            code: npm prune --production
        # TODO: in case we need to use the copy alternative, refer to:
        #       http://devcenter.wercker.com/docs/faq/how-to-bypass-timeouts
        #TODO@triglian: check if we should exclude other files     
        # - script:
        #     name: set $WERCKER_OUTPUT_DIR/ASQ as a custom output dir for ASQ
        #     code: |
        #           export OLD_OUTPUT_DIR=$WERCKER_OUTPUT_DIR
        #           export WERCKER_OUTPUT_DIR=$WERCKER_OUTPUT_DIR/ASQ
        # It only delete assets if executed in CI
        # TODO: see if i can improve the source deletion instead of copying (in the build step, maybe it works well) 
        # NOTE: does not remove the following folders, because the code might be needed by
        #       subsequent pipelines: lib/support/wercker lib/support/docker
        - script:
            name: remove files not needed for deployment
            cwd: $WERCKER_SOURCE_DIR
            code: |
                  if [ "$CI" = true ]; then
                    rm -Rf .git slide2html/.git public/ui/.git public/cockpit/.git .wercker test slides benchmark doc wercker.env wercker.yml .gitignore nightwatch nightwatch.conf.js docker-compose.yml README.md TODO.md CHANGELOG.md Makefile
                  else
                    echo 'Skipping step, because not needed for local execution'
                  fi
        # TODO (if step used): remove rsync, because it is installed by the wercker/copy-to-output@0.0.5 step
        # - wercker/copy-to-output@0.0.5:
        #     exclude: .git slide2html/.git public/ui/.git public/cockpit/.git .wercker test slides benchmark doc wercker.env wercker.yml .travis.yml .gitignore .dockerignore nightwatch nightwatch.conf.js docker-compose.yml README.md TODO.md CHANGELOG.md Makefile Dockerfile.ci Dockerfile
        # - script:
        #     name: restore default Wercker output dir
        #     code: |
        #           export WERCKER_OUTPUT_DIR=$OLD_OUTPUT_DIR
#
# Depends on: build-initial
# TODO: since we have to reload the environment, we collapsed some pipelines
#       , to save time. Or just install the dependency we need for the pipeline (if faster)
# NOTE: Name when split: build-pro:
#     steps:
        # - wercker/install-packages@1.0.0:
        #     packages: git
        #     clear-cache: false
        # install the dependencies for this pipeline

 
# Must depend on: build-pro (currently build)
# NOTE: we configured Wercker so that it pushes images for the following branches:
#       master devel release-* feat-* pr-* fix-* hotfix-* 
push-dev-release:
    # NOTE: we can start from a fresh box, because Wercker copies the output/source of the steps
    #       and all the changes we apply in the steps, happen in the source folder
    box:
      id: asqslide/wercker-box-asq:0.5.0-prod
      username: $DOCKER_HUB_BOX_USERNAME
      password: $DOCKER_HUB_BOX_PASSWORD
    steps:
    # Remove build dependencies
    # NOTE: We need apt-get update -q, otherwise the apt-get it is not able to find the packages
    # TODO (Decide): we can avoid the following step, if we have two different base boxes (dev and release)
    - script:
            name: remove ASQ build dependencies needed up to here in the workflow
            code: |
                  apt-get update -q
                  apt-get remove -y --purge build-essential
                  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false
                  apt-get clean autoclean -y
                  apt-get autoremove -y
                  rm -rf /var/lib/apt/lists/* /var/lib/{apt,dpkg,cache,log}/ /tmp/* /var/tmp/*
    - script:
            name: move ASQ to the /ASQ folder
            code: |
                  export ASQDIR=/ASQ
                  [ -d "$ASQDIR" ] || mkdir -p "$ASQDIR"
                  mv -f ${WERCKER_SOURCE_DIR}/* ${ASQDIR}
    - script:
            name: configure folders and file ASQ expects
            code: |
                  export ASQDIR=/ASQ
                  mkdir -p $ASQDIR/log/
                  touch $ASQDIR/log/app.log
    # TODO: separate the following steps. Currently they are merged for a strange error on Wercker
    - script:
            name: remove Wercker assets AND generate branch_commit as custom tag
            cwd: /
            # TODO: evaluate /mnt/*, it gives an error because it is a read only file system
            code: |
                  rm -Rf /report /pipeline
                  export DOCKER_IMAGE_CUSTOM_TAG=${WERCKER_GIT_BRANCH}"_"${WERCKER_GIT_COMMIT:0:6}
    # - script:
    #         name: generate branch_commit as custom tag
    #         code: |
    #               export DOCKER_IMAGE_CUSTOM_TAG=${WERCKER_GIT_BRANCH}"_"${WERCKER_GIT_COMMIT:0:6}
    # push container as-is
    - internal/docker-push:
        author: Vincenzo FERME <info@vincenzoferme.it>
        disable-sync: false
        repository: asqhub/asq-dev
        email: $DOCKER_HUB_EMAIL
        username: $DOCKER_HUB_USERNAME
        password: $DOCKER_HUB_PASSWORD
        # NOTE: first we push the commit specific image, then the image for the branch
        tag: $DOCKER_IMAGE_CUSTOM_TAG,$WERCKER_GIT_BRANCH
        ports: "80, 443, 3000"
        volumes: "/mnt, /var/cache/nginx, /ASQ/slides"
        working-dir: /ASQ
        env: "ASQDIR=/ASQ"
        cmd: /sbin/my_init
 
# TODO: define the deploy section, refer to http://devcenter.wercker.com/docs/steps/internal-steps
# TODO: define the push for the community edition 
# TODO: define the push for the pro edition 

# TODO: define the continuous deployment pipeline
