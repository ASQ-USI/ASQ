{
  "author": {
    "name": "Jaakko-Heikki Heusala",
    "email": "jheusala@iki.fi",
    "url": "http://www.jhh.me"
  },
  "name": "dustfs",
  "description": "Simplified interface to {dust} and file templates for Node.js",
  "version": "0.0.6",
  "repository": {
    "type": "git",
    "url": "git://github.com/jheusala/dustfs.git"
  },
  "main": "src/dustfs.js",
  "engines": {
    "node": ">=0.6.0"
  },
  "dependencies": {
    "dustjs-linkedin": "*",
    "snippets": ">=0.0.5"
  },
  "devDependencies": {},
  "readme": "\n{dust} with fs\n==============\n\nDescription\n-----------\n\nThis is a simplified interface to use templates from filesystem with \n[{dust}](http://akdubya.github.com/dustjs/) using Node.js.\n\nInstallation for Node.js\n------------------------\n\nSimplest way to install is to use [npm](http://npmjs.org/), just simply `npm \ninstall dustfs`. This will also install {dust} from npm.\n\nLicense\n-------\n\nMIT-style license, see [INSTALL.txt](http://github.com/jheusala/js-snippets/blob/master/LICENSE.txt).\n\nExample 1 - Single template\n---------------------------\n\nFile `templates/hello.dust`:\n\n\tHello {name}!\n\nFile `hello.js`:\n\n\tvar dustfs = require('dustfs');\n\tdustfs.dirs('templates'); // Read templates from this directory\n\tdustfs.render('hello.dust', {'name':'Captain Jack'}, function(err, out) {\n\t\tif(err) console.log('Error: '+err);\n\t\telse console.log(out);\n\t});\n\nResults for `node hello.js`:\n\n\tHello Captain Jack!\n\nExample 2 - Multiple templates\n------------------------------\n\nFile `templates/layout.dust`:\n\n\t<body>\n\t<div id=\"header\">\n\t{+header}\n\tHeader\n\t{/header}\n\t</div>\n\t<div id=\"content\">\n\t{+content}\n\tDefault content.\n\t{/content}\n\t</div>\n\t</body>\n\nFile `templates/partial.dust`:\n\n\t{>\"layout.dust\"/}\n\t\n\t{<header}\n\tHello, {name}!\n\t{/header}\n\t\n\t{<content}\n\tThis is our own content.\n\t{/content}\n\nFile `partial.js`:\n\n\tvar dustfs = require('dustfs');\n\tdustfs.debug(true);       // Enable optional debug using console.log\n\tdustfs.dirs('templates'); // Read templates from that sub directory\n\tdustfs.render('partial.dust', {'name':'Captain Jack'}, function(err, out) {\n\t\tif(err) console.log('Error: '+err);\n\t\telse console.log('Output:\\n' + out);\n\t});\n\nResults for `node partial.js`:\n\n\t[dustfs] [partial.dust] Waiting until directory loading is done before rendering...\n\t[dustfs] [layout.dust] Template compiled from templates/layout.dust\n\t[dustfs] [layout.dust] Template loaded: templates/layout.dust\n\t[dustfs] [hello.dust] Template compiled from templates/hello.dust\n\t[dustfs] [hello.dust] Template loaded: templates/hello.dust\n\t[dustfs] [partial.dust] Template compiled from templates/partial.dust\n\t[dustfs] [partial.dust] Template loaded: templates/partial.dust\n\t[dustfs] [partial.dust] Loading done! Let's render!\n\t[dustfs] [partial.dust] Rendering template...\n\tOutput:\n\t<body><div id=\"header\">Hello, Captain Jack!</div><div id=\"content\">This is our own content.</div></body>\n\ndustfs.dirs()\n-------------\n\n`dustfs.dirs(directory)` will compile and load all .dust files from the directory. \n\nThere is multiple ways to call `dustfs.dirs`.\n\nFull syntax is:\n\t[returns EventEmiter] dustfs.dirs(dir[, dir2[, ...[, callback]]])\n\nNote that using callbacks is not required since dustfs.render() will also wait \nfor any ongoing loading.\n\nCall to `dustfs.dirs(dir[, dir2[, ...]])` returns an EventEmitter which can be \nused to catch errors or to catch when the loading has ended:\n\n\tvar loading = dustfs.dirs('templates', 'docroot');\n\tloading.on('error', function(err) {\n\t\tconsole.log('Error: '+err);\n\t});\n\tloading.on('end', function() {\n\t\tconsole.log('Loading done!');\n\t});\n\nCall to `dustfs.dirs(dir[, callback])` is a second way to handle events:\n\n\tvar loading = dustfs.dirs('templates', function(err) {\n\t\tif(err) console.log('Errors: ' + err);\n\t\telse console.log('Loading done!');\n\t});\n\ndustfs.render()\n-------------\n\nCall to `dustfs.render(name, context, callback)` will render the named template \nwith provided context, and after that execute the callback with results:\n\n\tdustfs.render('partial.dust', {'name':'Captain Jack'}, function(err, out) {\n\t\tif(err) console.log('Error: '+err);\n\t\telse console.log('Output:\\n' + out);\n\t});\n",
  "readmeFilename": "README.md",
  "_id": "dustfs@0.0.6",
  "_from": "dustfs@~0.0.6"
}
